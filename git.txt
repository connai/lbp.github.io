git init #初始化仓库

git add *.* #添加跟踪文件（每修改一次文件，git commit前都要运行下该命令，保证修改被提交到版本库中）

git commit -m '说明文本' #提交附带提交说明
git commit -a -m '说明文本' #跳过使用暂存区域的方式，将所有已跟踪过的文件暂存起来一并提交
git commit --amend #尝试重新提交，为了合并漏掉前的提交，共计一次提交

git clone [url]  #克隆已存在的url指定git仓库到当前目录，当前目录将新建同名仓库文件夹（所有数据）

git clone [url] [name] #克隆已存在的url指定git仓库到当前目录，当前目录将新建名为name的仓库文件夹（所有数据）

git status #查看文件当前状态

git status -s #查看状态的精简版
git status --short #查看状态的精简版

.gitignore 文件配置，用于帮助git忽略某些不需要版本控制的文件  #开头的行和空行可理解为注释

     # no .a files
     *.a

     # but do track lib.a, even though you're ignoring .a files above
     !lib.a

     # only ignore the TODO file in the current directory, not subdir/TODO
     /TODO

     # ignore all files in the build/ directory
     build/

     # ignore doc/notes.txt, but not doc/server/arch.txt
     doc/*.txt

     # ignore all .pdf files in the doc/ directory
     doc/**/*.pdf

git diff #查看文件未暂存状态下更改的详细位置，比较当前文件和暂存区域快照间的差异（即修改后为未暂存的变化内容）
git diff --cached #查看已暂存将提交的内容

git rm *.* #从暂存区域中移除某文件
git rm -f *.* #如删前修改过文件并已放入暂存区域则需强制删除
git rm --cached *.* #删除git仓库中（即暂存区域），且保留在本磁盘，但不被跟踪
如：git rm log/\*.log 

git mv file_from file_to #移动文件，可能改名

git log [-p] [-2] [--stat] [--pretty[=[online|format:"%h - %an, %ar:%s"|]]] #查看日志,-p显示每次提交内容差异，-2显示近两次提交差异,--stat查看统计信息

git reset HEAD *.* #取消暂存某文件

git checkout -- *.* #撤销某文件之前的修改，即恢复到上次提交时的样子

git remote -v #查看远程仓库
git remote add [shortname] [url] #添加一个新的远程仓库简写到本地，映射到指定远程url
git remote show [remote-name] #查看远程仓库信息
git remote rename [remote-name] [new-name] #重命名远程仓库简写名
git remote rm [remote-name] #移除远程仓库

git fetch [remote-name] #从指定远程仓库中获取数据

git pull #相当于git fetch和git merge（前提是当前的本地分支存在跟踪分支）

git pull [remote-name] [remote-branch]:[local-branch] #拉取远程指定分支到本地指定分支

#push 到远程仓库分支在下次他人fetch时，其机器上会生成对应指向远程上一次push的仓库分支引用,即 [remote-name/branch-name],以便merge到本地
git push [remote-name] [branch-name] #推送本地分支到远程仓库，前提是对远程仓库有写入权限并为首人首次推送才能生效。若其他人已推，需再次拉取后并你本地工作后推送
git push [remote-name] [local-branch-name]:[remote-branch-name] #推送本地指定分支到远程指定仓库的指定分支中
git push [remote-name] --delete [branch] #删除远程分支

git tag #查看标签
git tag -l 'v.x.x.*' #查看指定的标签集

git branch [branch-name] #创建指定名的分支
git branch -d [branch] #删除本地某分支
git branch -D [branch] #强制本地删除分支
git push origin :[branch] #删除远程分支
git branch [--merged|no-merged] #查看已合并或未合并的分支列表
git branch -u [remote]/[branch] #修改当前分支的跟踪分支（上游分支）为指定的远程分支（@{u}或者@{upstream}可替代[remote]/[branch]表示）

git checkout [branch] #分支切换
git checkout -b [branch] #新建分支并切换到该分支上
git checkout -b [local-branch] [remote]/[branch] #新建指定名的本地分支，并跟踪远程指定仓库的指定分支

git merge [branch] #合并指定分支到当前分支

git rebase [branch] #变基操作，即将指定分支应用了当前分支到其共同祖先的依次修改，然后merge切回之前的那个分支
git rebase --onto [basebranch] [topicbranch] [subtopicbranch] #将忽略topicbranch，并将subtopicbranch中相对topicbranch独有部分应用到basebranch中，后配合 git merge subtopicbranch使用
git rebase [basebranch] [topicbranch] #将topicbranch的修改应用到basebranch中


